import psycopg2
from typing import Dict, List
from api.hh_api import HeadHunterAPI  # –ò–º–ø–æ—Ä—Ç API-–∫–ª–∞—Å—Å–∞
from config.employers import employer_ids   # –°–ø–∏—Å–æ–∫ ID –∫–æ–º–ø–∞–Ω–∏–π
from dotenv import load_dotenv
import os


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")

# üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    "dbname": DB_NAME,
    "user": DB_USER,
    "password": DB_PASSWORD,
    "host": DB_HOST,
    "port": DB_PORT
}

def save_employer(cursor, employer: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç"""
    cursor.execute(
        """
        INSERT INTO employers (id, name, url, description, open_vacancies)
        VALUES (%s, %s, %s, %s, %s)
        ON CONFLICT (id) DO NOTHING;
        """,
        (
            employer["id"],
            employer["name"],
            employer["url"],
            employer["description"],
            employer["open_vacancies"]
         )
    )


def save_vacancy(cursor, vacancy: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é"""
    cursor.execute(
        """
        INSERT INTO vacancies (title, salary_from, salary_to, currency, city, url, requirements, responsibilities, employer_id)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT DO NOTHING;
        """,
        (
            vacancy.get("title"),
            vacancy.get("salary_from"),
            vacancy.get("salary_to"),
            vacancy.get("currency"),  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ currency
            vacancy.get("city"),
            vacancy.get("url"),
            vacancy.get("requirements"),
            vacancy.get("responsibilities"),
            vacancy.get("employer_id"),
        )
    )


def load_data():
    hh = HeadHunterAPI(pages=1, per_page=1)
    connection = psycopg2.connect(**DB_CONFIG)
    cursor = connection.cursor()

    for employer_id in employer_ids:
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è {employer_id}...")
        employer_data = hh.get_employer_data(employer_id)
        vacancies = hh.get_vacancies_by_employer_id(employer_id)

        employer = {
            "id": employer_data["id"],
            "name": employer_data["name"],
            "url": employer_data.get("alternate_url", "N/A"),
            "description": employer_data.get("description", ""),
            "open_vacancies": employer_data.get("open_vacancies", 0)
        }

        for raw in vacancies:
            #print(raw)
            vacancy = HeadHunterAPI.format_vacancy_data(raw)
            vacancy["employer_id"] = employer["id"]

            #print("–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:", employer)
            #print("–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", vacancy)
            #print(employer_data.get("description"))


            save_employer(cursor, employer)
            save_vacancy(cursor, vacancy)

        connection.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è {employer_id}")

    cursor.close()
    connection.close()
    print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


if __name__ == "__main__":
    load_data()



