import psycopg2
from typing import Dict, List
from api.hh_api import HeadHunterAPI  # –ò–º–ø–æ—Ä—Ç API-–∫–ª–∞—Å—Å–∞
from config.employers import employer_ids   # –°–ø–∏—Å–æ–∫ ID –∫–æ–º–ø–∞–Ω–∏–π
from dotenv import load_dotenv
import os
from db.init_db import refresh_tables


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")

# üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    "dbname": DB_NAME,
    "user": DB_USER,
    "password": DB_PASSWORD,
    "host": DB_HOST,
    "port": DB_PORT
}

def save_employer(cursor, employer: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç"""
    cursor.execute(
        """
        INSERT INTO employers (id, name, url, open_vacancies)
        VALUES (%s, %s, %s, %s)
        ON CONFLICT (id) DO NOTHING;
        """,
        (
            employer["id"],
            employer["name"],
            employer["url"],
            employer["open_vacancies"]
         )
    )


def save_vacancy(cursor, vacancy: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é"""
    cursor.execute(
        """
        INSERT INTO vacancies (title, salary_from, salary_to, currency, city, url, requirements, responsibilities, employer_id)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT DO NOTHING;
        """,
        (
            vacancy.get("title"),
            vacancy.get("salary_from"),
            vacancy.get("salary_to"),
            vacancy.get("currency"),
            vacancy.get("city"),
            vacancy.get("url"),
            vacancy.get("requirements"),
            vacancy.get("responsibilities"),
            vacancy.get("employer_id"),
        )
    )


def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö —Å hh.ru –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    refresh_tables()
    hh = HeadHunterAPI()
    connection = psycopg2.connect(**DB_CONFIG)
    cursor = connection.cursor()

    for employer_id in employer_ids:
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è {employer_id}...")
        employer_data = hh.get_employer_data(employer_id)
        vacancies = hh.get_vacancies_by_employer_id(employer_id)

        employer = {
            "id": employer_data["id"],
            "name": employer_data["name"],
            "url": employer_data.get("alternate_url", "N/A"),
            "open_vacancies": employer_data.get("open_vacancies", 0)
        }

        for raw in vacancies:
            #print(raw)
            vacancy = HeadHunterAPI.format_vacancy_data(raw)
            vacancy["employer_id"] = employer["id"]

            #print("–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:", employer)
            #print("–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", vacancy)
            #print(employer_data.get("description"))


            save_employer(cursor, employer)
            save_vacancy(cursor, vacancy)

        connection.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è {employer_id}")

    cursor.close()
    connection.close()
    print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


class DBManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π."""
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        self.conn = psycopg2.connect(
            dbname=os.getenv("DB_NAME"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT")
        )
        self.conn.autocommit = True
        self.cursor = self.conn.cursor()

    def get_companies_and_vacancies_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —É –∫–∞–∂–¥–æ–π"""
        self.cursor.execute("""
            SELECT employers.name, employers.open_vacancies
            FROM employers
            LEFT JOIN vacancies ON employers.id = vacancies.employer_id
            GROUP BY employers.name;
        """)
        return self.cursor.fetchall()

    def get_all_vacancies(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏, –≤–∞–∫–∞–Ω—Å–∏–∏, –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Å—Å—ã–ª–∫–∏"""
        self.cursor.execute("""
            SELECT employers.name, vacancies.title, vacancies.salary_from, vacancies.salary_to, vacancies.url
            FROM vacancies
            JOIN employers ON vacancies.employer_id = employers.id;
        """)
        return self.cursor.fetchall()

    def get_avg_salary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É salary_from –∏ salary_to)"""
        self.cursor.execute("""
            SELECT AVG((COALESCE(salary_from, 0) + COALESCE(salary_to, 0)) / 2.0)
            FROM vacancies
            WHERE salary_from IS NOT NULL AND salary_to IS NOT NULL;
        """)
        return self.cursor.fetchone()[0]

    def get_vacancies_with_higher_salary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"""
        avg_salary = self.get_avg_salary()
        self.cursor.execute("""
            SELECT title, salary_from, salary_to, url
            FROM vacancies
            WHERE ((COALESCE(salary_from, 0) + COALESCE(salary_to, 0)) / 2.0) > %s;
        """, (avg_salary,))
        return self.cursor.fetchall()

    def get_vacancies_with_keyword(self, keyword):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏"""
        self.cursor.execute("""
            SELECT title, salary_from, salary_to, url
            FROM vacancies
            WHERE title ILIKE %s;
        """, (f"%{keyword}%",))
        return self.cursor.fetchall()

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        self.cursor.close()
        self.conn.close()